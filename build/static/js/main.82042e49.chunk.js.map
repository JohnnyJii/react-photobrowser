{"version":3,"sources":["logo.svg","Components/User.js","Components/Album.js","Components/Photo.js","Components/Home.js","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","User","state","users","handleClick","userId","_this","props","selectedUserId","onUserSelected","_this2","this","axios","get","then","res","setState","data","catch","err","console","log","_this3","userData","react_default","a","createElement","className","map","userItem","key","id","onClick","style","backgroundColor","name","Component","Album","albums","change","event","onAlbumSelected","target","value","nextProps","concat","albumData","onChange","selected","disabled","albumItem","title","Photo","photos","selectedAlbumId","photoData","photoItem","src","thumbnailUrl","Home","albumId","Components_User","Components_Album","Components_Photo","AppRouter","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","BrowserRouter","Route","exact","path","render","Components_Home","App","src_AppRouter","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82042e49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass User extends Component {\n  state = {\n    users: []\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => {\n        this.setState({\n          users: res.data\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  handleClick = userId => {\n    // checks if user is active already, sets the state to false in home and consequently the button becomes white again\n    if (userId === this.props.selectedUserId) {\n      this.props.onUserSelected(false);\n    } else {\n      this.props.onUserSelected(userId);\n    } // 2) handleClick() passes the userId to onUserSelected, which has been created in Home and will uopdate the state\n  };\n\n  render() {\n    const userData = this.state.users; // makes it easier to access the state\n    return (\n      <div className=\"main_container\">\n        <div className=\"user_container\">\n          <h1 className=\"title\">Users</h1>\n          {!userData ? (\n            <p>...Loading</p>\n          ) : (\n            <ul>\n              {userData.map(userItem => {\n                return (\n                  <div\n                    key={userItem.id} // you can't render two things with the same id. either pass a key to map or do like this\n                    className=\"user_box\"\n                    // 1) call handleClick func with the user id as parameter\n                    onClick={() => this.handleClick(userItem.id)}\n                    // check if the selectedUserId I passed from Home as props is the same as the userId and changes its colour\n                    style={{\n                      // style wants an object. backgroundcolor is a convention for react which wouldn't accept \"backgroud-color\"\n                      backgroundColor:\n                        this.props.selectedUserId === userItem.id // check if the selectedUserId is the same and the one we are looping in\n                          ? \"lightgreen\"\n                          : \"white\"\n                    }}\n                  >\n                    {userItem.name}\n                  </div>\n                );\n              })}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default User;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass Album extends Component {\n  state = {\n    albums: [] // this is the only thing whose state gets updated in this component\n  };\n\n  // albums' dropdown were not loading up until I used componentWillReceiveProps(nextProps). Src: http://busypeoples.github.io/post/react-component-lifecycle/\n  componentWillReceiveProps(nextProps) {\n    // if (nextProps.selectedUserId === false) this.setState({ albums: [] });\n\n    if (nextProps.selectedUserId)\n      // manually force update props\n      axios\n        .get(\n          // using the query in the url it takes less to load up because it doesn't have to load up all the items\n          `https://jsonplaceholder.typicode.com/albums?userId=${\n            nextProps.selectedUserId\n          }`\n        )\n        .then(res => {\n          this.setState({\n            albums: res.data\n          });\n        })\n        .catch(err => console.log(err));\n  }\n\n  change = event => {\n    // 2) the change() function takes an event (the 'value' of the option) and passes is to the func onAlbumSelected which comes from Home\n    this.props.onAlbumSelected(event.target.value);\n  };\n\n  render() {\n    const albumData = this.state.albums; // makes it easier to access the state\n    return (\n      <div className=\"album_container\">\n        <select\n          className=\"dropdown\"\n          // 1) call change func with the current option (value) as parameter\n          onChange={this.change}\n          // line 41 is no longer needed, because I guess value is accessed with the finc change (line 31)\n          // value={this.state.value}\n        >\n          <option selected disabled>\n            Albums\n          </option>\n          {!albumData} ? <p>...Loading</p> :\n          {albumData.map(albumItem => {\n            return (\n              <option value={albumItem.id} className=\"album_box\">\n                {albumItem.title}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Album;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nclass Photo extends Component {\n  state = {\n    photos: [] // this is the only thing whose state gets updated in this component\n  };\n\n  // photos were not loading up until I used componentWillReceiveProps(nextProps). Src: http://busypeoples.github.io/post/react-component-lifecycle/\n  componentWillReceiveProps(nextProps) {\n    axios\n      .get(\n        // using the query in the url it takes less to load up because it doesn't have to load up all the items\n        `https://jsonplaceholder.typicode.com/photos?albumId=${\n          nextProps.selectedAlbumId\n        }`\n      )\n      .then(res => {\n        this.setState({\n          photos: res.data\n        });\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    const photoData = this.state.photos; // makes it easier to access the state\n    return (\n      <div>\n        {!photoData ? (\n          <p>...Loading</p>\n        ) : (\n          <div className=\"photobox_container\">\n            {photoData.map(photoItem => {\n              // if (parseInt(this.state.selectedAlbumId) === parseInt(u.albumId)) // this condition is no longer needed because I am updating the axios api url\n              return <img src={photoItem.thumbnailUrl} className=\"photo_box\" />;\n            })}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Photo;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport User from \"./User\";\nimport Album from \"./Album\";\nimport Photo from \"./Photo\";\n\nclass Home extends Component {\n  state = {\n    selectedUserId: false,\n    selectedAlbumId: false\n  };\n\n  // gets the userId from the component User, to which it's passed as props\n  onUserSelected = userId => {\n    this.setState({ selectedUserId: userId, selectedAlbumId: false });\n  };\n\n  onAlbumSelected = albumId => {\n    this.setState({ selectedAlbumId: albumId });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Photo Album</h1>\n        <div className=\"sdn_container\">\n          <User\n            // Pass the func onUserSelected to User Component, this will update the state of selectedUserId here in Home.js\n            onUserSelected={this.onUserSelected}\n            // Pass the selectedUserId state as props to the User Component to be able to change the colour of the active user on click\n            selectedUserId={this.state.selectedUserId}\n          />\n          <div className=\"album_photo_container\">\n            <Album\n              // Pass the selectedUserId state as props to Album Component, this will update Axios's url request for album\n              selectedUserId={this.state.selectedUserId}\n              // Pass the func onAlbumSelected to Album Component, this will update the state of selectedAlbumId here in Home.js\n              onAlbumSelected={this.onAlbumSelected}\n            />\n            <Photo\n              // Pass the selectedAlbumId state as props to Album Component, this will update Axios's url request for th selected album's id photos\n              selectedAlbumId={this.state.selectedAlbumId}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Home;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./Components/Home\";\n\nclass AppRouter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // user: \"\"\n    };\n  }\n\n  // componentDidMount;\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path=\"/\" render={props => <Home {...props} />} />\n          {/* <Route path=\"/:user\" render={props => <Home {...props} />} /> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default AppRouter;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport Router from \"./AppRouter\";\n\nclass App extends Component {\n  render() {\n    return <Router />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}